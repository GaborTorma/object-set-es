{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;AACA,IAAM,aAAa,SAAnB;AACA,IAAM,UAAU,CACd,SADc,EAEd,QAFc,EAGd,KAHc,EAId,MAJc,CAAhB;;kBAOe,UAAC,KAAD,EAAW;AACxB,SAAQ;AACN,aAAS;AACP,eAAS;AACP,aADO,iBACD,IADC,EACK,IADL,EACW;AAChB,eAAK,cAAL,GAAsB,KAAtB;AADgB;AAAA;AAAA;;AAAA;AAEhB,iCAAmB,KAAK,IAAL,CAAU,IAA7B,8HAAmC;AAAA,kBAAxB,IAAwB;;;AAEjC,kBAAM,aAAa,KAAK,UAAL,IAAmB,EAAtC;AACA,kBAAM,aAAa,WAAW,GAAX,CAAe,UAAC,SAAD;AAAA,uBAAe,UAAU,KAAV,CAAgB,IAA/B;AAAA,eAAf,CAAnB;AACA,kBAAI,WAAW,OAAX,CAAmB,UAAnB,IAAiC,CAAC,CAAtC,EAAyC;AACvC,qBAAK,cAAL,GAAsB,IAAtB;AACA;AACD;;;AAGD,kBAAM,eAAe,KAAK,YAAL,IAAqB,EAA1C;AACA,kBAAM,iBAAiB,aAAa,GAAb,CAAiB,UAAC,WAAD;AAAA,uBAAiB,YAAY,EAAZ,CAAe,IAAhC;AAAA,eAAjB,CAAvB;AACA,kBAAI,eAAe,OAAf,CAAuB,UAAvB,IAAqC,CAAC,CAA1C,EAA6C;AAC3C,qBAAK,cAAL,GAAsB,IAAtB;AACA;AACD;AACF;AAlBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBjB;AApBM,OADF;;;AAyBP,mBAzBO,yBAyBO,IAzBP,EAyBa,IAzBb,EAyBmB;AACxB,YAAI,KAAK,cAAT,EAAyB;AACvB;AACD;;AAED,YAAI,KAAK,GAAL,CAAS,QAAT,EAAmB,IAAnB,CAAwB,IAAxB,KAAiC,UAArC,EAAiD;AAC/C,eAAK,IAAL,CAAU,MAAV,GAAmB,KAAK,SAAL,CAAe,UAAf,EAA2B,SAA3B,EAAsC,SAAtC,CAAnB;AACD;AACF,OAjCM;;;;AAoCP,gBApCO,sBAoCI,IApCJ,EAoCU,IApCV,EAoCgB;AACrB,YAAI,KAAK,cAAT,EAAyB;AACvB;AACD;;AAED,YAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,UAAvB,EAAmC;AACjC,cAAI,KAAK,UAAL,CAAgB,gBAAhB,EAAJ,EAAwC;AACtC,iBAAK,WAAL,CAAiB,KAAK,SAAL,CAAe,UAAf,EAA2B,SAA3B,EAAsC,SAAtC,CAAjB;AACD;AACF;AACF,OA9CM;;;;AAiDP,sBAjDO,4BAiDU,IAjDV,EAiDgB,IAjDhB,EAiDsB;AAC3B,YAAI,KAAK,cAAT,EAAyB;AACvB;AACD;;AAED,gBAAQ,OAAR,CAAgB,UAAC,MAAD,EAAY;AAC1B,cAAI,KAAK,cAAL,CAAuB,UAAvB,SAAqC,MAArC,CAAJ,EAAoD;AAClD,gBAAM,WAAW,KAAK,SAAL,CAAe,UAAf,EAA2B,SAA3B,EAAsC,SAAtC,CAAjB;AADkD,+BAK9C,MAAM,KALwC;AAAA,gBAGhD,gBAHgD,gBAGhD,gBAHgD;AAAA,gBAIhD,UAJgD,gBAIhD,UAJgD;;AAMlD,iBAAK,WAAL,CAAiB,iBAAiB,QAAjB,EAA2B,WAAW,MAAX,CAA3B,CAAjB;AACD;AACF,SATD;AAUD;AAhEM;AADH,GAAR;AAoED,C","file":"index.js","sourcesContent":["// target\nconst defineName = 'Promise';\nconst methods = [\n  'resolve',\n  'reject',\n  'all',\n  'race',\n];\n\nexport default (babel) => {\n  return ({\n    visitor: {\n      Program: {\n        enter(path, file) {\n          file.UNUSE_BLUEBIRD = false;\n          for (const node of path.node.body) {\n            // found \"import Promise\"\n            const specifiers = node.specifiers || [];\n            const localNames = specifiers.map((specifier) => specifier.local.name);\n            if (localNames.indexOf(defineName) > -1) {\n              file.UNUSE_BLUEBIRD = true;\n              return;\n            }\n\n            // found \"var Promise\"\n            const declarations = node.declarations || [];\n            const declarationIds = declarations.map((declaration) => declaration.id.name);\n            if (declarationIds.indexOf(defineName) > -1) {\n              file.UNUSE_BLUEBIRD = true;\n              return;\n            }\n          }\n        },\n      },\n\n      // found \"new Promise\"\n      NewExpression(path, file) {\n        if (file.UNUSE_BLUEBIRD) {\n          return;\n        }\n\n        if (path.get('callee').node.name === defineName) {\n          path.node.callee = file.addImport('bluebird', 'default', 'Promise');\n        }\n      },\n\n      // found \"fn(Promise)\"\n      Identifier(path, file) {\n        if (file.UNUSE_BLUEBIRD) {\n          return;\n        }\n\n        if (path.node.name === defineName) {\n          if (path.parentPath.isCallExpression()) {\n            path.replaceWith(file.addImport('bluebird', 'default', 'Promise'));\n          }\n        }\n      },\n\n      // found \"Promise.methods\"\n      MemberExpression(path, file) {\n        if (file.UNUSE_BLUEBIRD) {\n          return;\n        }\n\n        methods.forEach((method) => {\n          if (path.matchesPattern(`${defineName}.${method}`)) {\n            const bluebird = file.addImport('bluebird', 'default', 'Promise');\n            const {\n              memberExpression,\n              identifier,\n            } = babel.types;\n            path.replaceWith(memberExpression(bluebird, identifier(method)));\n          }\n        });\n      },\n    },\n  });\n};\n"]}