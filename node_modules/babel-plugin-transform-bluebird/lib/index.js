'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// target
var defineName = 'Promise';
var methods = ['resolve', 'reject', 'all', 'race'];

exports.default = function (babel) {
  return {
    visitor: {
      Program: {
        enter: function enter(path, file) {
          file.UNUSE_BLUEBIRD = false;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = path.node.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var node = _step.value;

              // found "import Promise"
              var specifiers = node.specifiers || [];
              var localNames = specifiers.map(function (specifier) {
                return specifier.local.name;
              });
              if (localNames.indexOf(defineName) > -1) {
                file.UNUSE_BLUEBIRD = true;
                return;
              }

              // found "var Promise"
              var declarations = node.declarations || [];
              var declarationIds = declarations.map(function (declaration) {
                return declaration.id.name;
              });
              if (declarationIds.indexOf(defineName) > -1) {
                file.UNUSE_BLUEBIRD = true;
                return;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      },

      // found "new Promise"
      NewExpression: function NewExpression(path, file) {
        if (file.UNUSE_BLUEBIRD) {
          return;
        }

        if (path.get('callee').node.name === defineName) {
          path.node.callee = file.addImport('bluebird', 'default', 'Promise');
        }
      },


      // found "fn(Promise)"
      Identifier: function Identifier(path, file) {
        if (file.UNUSE_BLUEBIRD) {
          return;
        }

        if (path.node.name === defineName) {
          if (path.parentPath.isCallExpression()) {
            path.replaceWith(file.addImport('bluebird', 'default', 'Promise'));
          }
        }
      },


      // found "Promise.methods"
      MemberExpression: function MemberExpression(path, file) {
        if (file.UNUSE_BLUEBIRD) {
          return;
        }

        methods.forEach(function (method) {
          if (path.matchesPattern(defineName + '.' + method)) {
            var bluebird = file.addImport('bluebird', 'default', 'Promise');
            var _babel$types = babel.types;
            var memberExpression = _babel$types.memberExpression;
            var identifier = _babel$types.identifier;

            path.replaceWith(memberExpression(bluebird, identifier(method)));
          }
        });
      }
    }
  };
};

module.exports = exports['default'];
//# sourceMappingURL=index.js.map